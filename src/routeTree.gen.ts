/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as authenticatedRouteImport } from './routes/__authenticated/route'
import { Route as IndexImport } from './routes/index'
import { Route as authenticatedProgressImport } from './routes/__authenticated/progress'
import { Route as authenticatedProfileImport } from './routes/__authenticated/profile'
import { Route as authenticatedLeaderboardImport } from './routes/__authenticated/leaderboard'
import { Route as authenticatedDashboardImport } from './routes/__authenticated/dashboard'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'

// Create/Update Routes

const authenticatedRouteRoute = authenticatedRouteImport.update({
  id: '/__authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedProgressRoute = authenticatedProgressImport.update({
  id: '/progress',
  path: '/progress',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authenticatedProfileRoute = authenticatedProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authenticatedLeaderboardRoute = authenticatedLeaderboardImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authenticatedDashboardRoute = authenticatedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/__authenticated': {
      id: '/__authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authenticatedRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
    '/__authenticated/dashboard': {
      id: '/__authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof authenticatedDashboardImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/__authenticated/leaderboard': {
      id: '/__authenticated/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof authenticatedLeaderboardImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/__authenticated/profile': {
      id: '/__authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof authenticatedProfileImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/__authenticated/progress': {
      id: '/__authenticated/progress'
      path: '/progress'
      fullPath: '/progress'
      preLoaderRoute: typeof authenticatedProgressImport
      parentRoute: typeof authenticatedRouteImport
    }
  }
}

// Create and export the route tree

interface authenticatedRouteRouteChildren {
  authenticatedDashboardRoute: typeof authenticatedDashboardRoute
  authenticatedLeaderboardRoute: typeof authenticatedLeaderboardRoute
  authenticatedProfileRoute: typeof authenticatedProfileRoute
  authenticatedProgressRoute: typeof authenticatedProgressRoute
}

const authenticatedRouteRouteChildren: authenticatedRouteRouteChildren = {
  authenticatedDashboardRoute: authenticatedDashboardRoute,
  authenticatedLeaderboardRoute: authenticatedLeaderboardRoute,
  authenticatedProfileRoute: authenticatedProfileRoute,
  authenticatedProgressRoute: authenticatedProgressRoute,
}

const authenticatedRouteRouteWithChildren =
  authenticatedRouteRoute._addFileChildren(authenticatedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof authenticatedRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/dashboard': typeof authenticatedDashboardRoute
  '/leaderboard': typeof authenticatedLeaderboardRoute
  '/profile': typeof authenticatedProfileRoute
  '/progress': typeof authenticatedProgressRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof authenticatedRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/dashboard': typeof authenticatedDashboardRoute
  '/leaderboard': typeof authenticatedLeaderboardRoute
  '/profile': typeof authenticatedProfileRoute
  '/progress': typeof authenticatedProgressRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/__authenticated': typeof authenticatedRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/__authenticated/dashboard': typeof authenticatedDashboardRoute
  '/__authenticated/leaderboard': typeof authenticatedLeaderboardRoute
  '/__authenticated/profile': typeof authenticatedProfileRoute
  '/__authenticated/progress': typeof authenticatedProgressRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/dashboard'
    | '/leaderboard'
    | '/profile'
    | '/progress'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/register'
    | '/dashboard'
    | '/leaderboard'
    | '/profile'
    | '/progress'
  id:
    | '__root__'
    | '/'
    | '/__authenticated'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/__authenticated/dashboard'
    | '/__authenticated/leaderboard'
    | '/__authenticated/profile'
    | '/__authenticated/progress'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authenticatedRouteRoute: typeof authenticatedRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authenticatedRouteRoute: authenticatedRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/__authenticated",
        "/(auth)/login",
        "/(auth)/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/__authenticated": {
      "filePath": "__authenticated/route.tsx",
      "children": [
        "/__authenticated/dashboard",
        "/__authenticated/leaderboard",
        "/__authenticated/profile",
        "/__authenticated/progress"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/__authenticated/dashboard": {
      "filePath": "__authenticated/dashboard.tsx",
      "parent": "/__authenticated"
    },
    "/__authenticated/leaderboard": {
      "filePath": "__authenticated/leaderboard.tsx",
      "parent": "/__authenticated"
    },
    "/__authenticated/profile": {
      "filePath": "__authenticated/profile.tsx",
      "parent": "/__authenticated"
    },
    "/__authenticated/progress": {
      "filePath": "__authenticated/progress.tsx",
      "parent": "/__authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
